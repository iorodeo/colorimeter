from __future__ import print_function
import sys
import functools
import random
from matplotlib import pylab

from PyQt4 import QtCore
from PyQt4 import QtGui

from colorimeter_plot_gui_ui import Ui_MainWindow 
#from colorimeter import Colorimeter


class ColorimeterPlotMainWindow(QtGui.QMainWindow, Ui_MainWindow):

    def __init__(self,parent=None):
        super(ColorimeterPlotMainWindow,self).__init__(parent)
        self.radioButtonColors = ('red', 'green', 'blue', 'white')
        self.setupUi(self)
        self.connectActions()
        self.initialize()

    def connectActions(self):
        self.connectPushButton.pressed.connect(self.connectPushButton_Pressed)
        self.connectPushButton.clicked.connect(self.connectPushButton_Clicked)
        for color in self.radioButtonColors:
            button = getattr(self,'{0}RadioButton'.format(color))
            callback = functools.partial(self.colorRadioButton_Clicked, color)
            button.clicked.connect(callback)
        self.plotPushButton.clicked.connect(self.plotPushButton_Clicked)

    def initialize(self):

        self.serialPortLineEdit.setText('/dev/ttyUSB0')
        self.redRadioButton.setChecked(True)


        # Disable widgets for start up condition
        if 0:
            for color in self.radioButtonColors:
                button = getattr(self,'{0}RadioButton'.format(color))
                button.setEnabled(False)

            self.dataTableWidget.setEnabled(False)

            self.calibratePushButton.setEnabled(False)
            self.measurePushButton.setEnabled(False)
            self.plotPushButton.setEnabled(False)

        # Write some data to the table
        numValues = 20
        tableValues = []
        for i in range(numValues):
            value0 = float(i+1)
            value1 = 2.0*(i+1) + random.random()
            tableValues.append((value0, value1))

        # Set up data table
        self.dataTableWidget.setRowCount(len(tableValues))
        self.dataTableWidget.setColumnCount(2)
        self.dataTableWidget.setHorizontalHeaderLabels(('Concentration','Absorbance')) 
        self.dataTableWidget.horizontalHeader().setResizeMode(QtGui.QHeaderView.Stretch)

        for i, rowValues in enumerate(tableValues):
            for j, value in enumerate(rowValues):
                tableItem = QtGui.QTableWidgetItem()
                self.dataTableWidget.setItem(i,j,tableItem)
                tableItem.setText(str(value))



                
    def connectPushButton_Pressed(self):
        print('connectPushButton_Pressed')

    def connectPushButton_Clicked(self):
        print('connectPushButton_Clicked')

    def colorRadioButton_Clicked(self,color):
        print(color)

    def plotPushButton_Clicked(self):
        print('plotPushButton_Clicked')
        xList = []
        yList = []
        for i in range(self.dataTableWidget.rowCount()):
            tableItem = self.dataTableWidget.item(i,0)
            x = float(tableItem.text())
            tableItem = self.dataTableWidget.item(i,1)
            y = float(tableItem.text())
            xList.append(x)
            yList.append(y)

        pylab.plot(x,y)
        

    def main(self):
        self.show()

# -----------------------------------------------------------------------------
if __name__ == '__main__':

    app = QtGui.QApplication(sys.argv)
    mainWindow = ColorimeterPlotMainWindow()
    mainWindow.main()
    app.exec_()

